"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[958],{4852:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>m});var n=r(9231);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(r),d=o,m=u["".concat(l,".").concat(d)]||u[d]||f[d]||a;return r?n.createElement(m,i(i({ref:t},c),{},{components:r})):n.createElement(m,i({ref:t},c))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:o,i[1]=s;for(var p=2;p<a;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},502:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>f,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var n=r(5907),o=(r(9231),r(4852));const a={description:"Create Proof Requests",sidebar_position:3},i="Create Proof Request",s={unversionedId:"long/create-proof-request",id:"long/create-proof-request",title:"Create Proof Request",description:"Create Proof Requests",source:"@site/docs/long/create-proof-request.md",sourceDirName:"long",slug:"/long/create-proof-request",permalink:"/e2e-zk-ecdsa/docs/long/create-proof-request",draft:!1,editUrl:"https://github.com/privacy-scaling-explorations/tree/main/docs/docs/docs/long/create-proof-request.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{description:"Create Proof Requests",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Anonymity Set",permalink:"/e2e-zk-ecdsa/docs/long/anonset"},next:{title:"Generate Proofs",permalink:"/e2e-zk-ecdsa/docs/long/generate-zk-proof"}},l={},p=[],c={toc:p},u="wrapper";function f(e){let{components:t,...r}=e;return(0,o.kt)(u,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"create-proof-request"},"Create Proof Request"),(0,o.kt)("p",null,"To create proofs you'll need to supply the following parameters:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"a list of ",(0,o.kt)("inlineCode",{parentName:"li"},"addresses")," (aka anonymity set): ",(0,o.kt)("inlineCode",{parentName:"li"},"string[]")),(0,o.kt)("li",{parentName:"ul"},"a ",(0,o.kt)("inlineCode",{parentName:"li"},"message"),": ",(0,o.kt)("inlineCode",{parentName:"li"},"string")),(0,o.kt)("li",{parentName:"ul"},"the ",(0,o.kt)("inlineCode",{parentName:"li"},"rawSignature")," produced by the address you want to prove is member of the anonymity set: ",(0,o.kt)("inlineCode",{parentName:"li"},"string")),(0,o.kt)("li",{parentName:"ul"},"the ",(0,o.kt)("inlineCode",{parentName:"li"},"url")," of the proof generation API: ",(0,o.kt)("inlineCode",{parentName:"li"},"string"),"\nYou can either run it ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/privacy-scaling-explorations/e2e-zk-ecdsa/tree/main/apis/prove"},"locally")," or use the hosted version at ",(0,o.kt)("a",{parentName:"li",href:"#"},"TODO"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const proofRequest = new ProofRequest({ addresses, message, rawSignature, url })\n")))}f.isMDXComponent=!0}}]);