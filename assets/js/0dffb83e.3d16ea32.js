"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[75],{4852:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var n=r(9231);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),u=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=u(r),d=a,f=c["".concat(l,".").concat(d)]||c[d]||m[d]||i;return r?n.createElement(f,s(s({ref:t},p),{},{components:r})):n.createElement(f,s({ref:t},p))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,s=new Array(i);s[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[c]="string"==typeof e?e:a,s[1]=o;for(var u=2;u<i;u++)s[u]=r[u];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},1347:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var n=r(5907),a=(r(9231),r(4852));const i={sidebar_position:5},s="Roadmap",o={unversionedId:"roadmap",id:"roadmap",title:"Roadmap",description:"The current version of Anon Klub is a proof of concept and has major drawbacks in due to its implementation details. The ZKPs it generates should not be used for production systems. However, new systems are being built that will make Anon Klub far more efficient and secure.",source:"@site/docs/roadmap.md",sourceDirName:".",slug:"/roadmap",permalink:"/e2e-zk-ecdsa/docs/roadmap",draft:!1,editUrl:"https://github.com/privacy-scaling-explorations/tree/main/docs/docs/docs/roadmap.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"APIs",permalink:"/e2e-zk-ecdsa/docs/apis"}},l={},u=[{value:"Future Plans",id:"future-plans",level:2},{value:"PLUME",id:"plume",level:3},{value:"Spartan-ecdsa",id:"spartan-ecdsa",level:3}],p={toc:u},c="wrapper";function m(e){let{components:t,...r}=e;return(0,a.kt)(c,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"roadmap"},"Roadmap"),(0,a.kt)("p",null,"The current version of Anon Klub is a proof of concept and has major drawbacks in due to its implementation details. ",(0,a.kt)("strong",{parentName:"p"},"The ZKPs it generates should not be used for production systems.")," However, new systems are being built that will make Anon Klub far more efficient and secure."),(0,a.kt)("p",null,"In particular, the current version uses:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"groth16 proofs over the bn128 curve"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"An unsafe CRS")),(0,a.kt)("li",{parentName:"ul"},"Standard secp256k1 ECDSA signature verification"),(0,a.kt)("li",{parentName:"ul"},"Merkle trees for set membership")),(0,a.kt)("p",null,"The most serious issue is that we're using groth16, and haven't done a ceremony for the trusted setup. By using this system you're trusting that ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/blakemscurr"},"blakemscurr")," deleted the toxic waste correctly. Note that an untrusted setup is not just a privacy issue, but also a soundness issue - he may be able to generate false proofs that the verifier will accept, and potentially steal from your system!"),(0,a.kt)("p",null,"Groth16 proofs can be cheaply verified onchain, but proving is inefficient. Our current proofs take ~10 minutes to generate on a reasonably powerful server, which is why we have a dedicated server where users can generate their proofs. This, of course, means users either have to run an expensive procedure themselves, or trust us with their privacy."),(0,a.kt)("p",null,"Standard secp256k1 signature verification has two problems: it's non-deterministic, and it's not the most efficient. Non-determinism is imporant for systems that require nullifiers, and is fixed with PLUME which is ",(0,a.kt)("a",{parentName:"p",href:"#plume"},"discussed below"),". Spartan-ecdsa (also ",(0,a.kt)("a",{parentName:"p",href:"#spartan-ecdsa"},"discussed below"),") uses a more efficient verifier but is also non-deterministic."),(0,a.kt)("p",null,"Merkle trees are a simple and useful accumulator, but other accumulators have better properties. For example, Caulk has cheaper insertions making which saves significant gas costs for mixers."),(0,a.kt)("h2",{id:"future-plans"},"Future Plans"),(0,a.kt)("p",null,"In the future, Anon Klub will support two types of signatures: nullifiers, and plain signaures. Nullifiers are needed for many kinds of financial applications such as mixers, and plain signatures are more efficient if nullifiers aren't needed."),(0,a.kt)("h3",{id:"plume"},"PLUME"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/zk-nullifier-sig/zk-nullifier-sig"},"PLUME")," is the leading candidate for ECDSA nullifiers. The only existing implementation of a PLUME circuit has over 4 million constraints, making it worse than even a naive signature circuit. We are currently working on a PLUME implementation in Halo2 which will significantly improve prover time, and other teams are working on wallet integration for PLUME. Once these are complete, Anon Klub will implement user friendly set membership for PLUME nullifiers."),(0,a.kt)("h3",{id:"spartan-ecdsa"},"Spartan-ecdsa"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/personaelabs/spartan-ecdsa"},"Spartan-ecdsa")," is, to our knowledge, the most efficient method for zk-ECDSA. It is already useful in offchain applications, and we intend to implement it in Anon Klub soon for that reason. It uses the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/microsoft/Spartan"},"Spartan")," proving system, which doesn't have efficient onchain verification, but that is ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/personaelabs/spartan-ecdsa/tree/hoplite"},"in the works"),"."))}m.isMDXComponent=!0}}]);